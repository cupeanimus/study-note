2.9 인터페이스를 짧게 유지하고 스마트(smart)를 사용하자

interface Exchange {
    float rate(String target);
    float rate(String source, String target);
}

이 인터페이스는 섹션의 주제를 설명하는데 충분할지 몰라도, 너무 많은 것을 요구하기 때문에 설계 관점에서는 형편없는 인터페이스다.(이정도가??)
이 인터페이스는 응집도가 낮은 클래스를 만들게 한다.
이에대한 해결로
interface Exchange {
    float rate(String source, String target);
    final class smart {
        private final Exchange origin;
        public float toUsd(String source) {
            return this.origin.rate(source, "USD");
        }
    }
}

float rate = new Exchange.Smart(new NYSE())
    .toUsd("EUR");


이제 smart 클래스에 추가하며 Exchange 인터페이스는 작고, 높은 응집도를 유지할 수 있게 되었다.

기본적으로 인터페이스를 짧게 만들고 '스마트'클래스를 인터페이스와 함께 배포함으로써 공통 기능을 추출하고 코드 중복을 피할 수 있게 되었다.
이 접근 방법은 데코레이터와 매우 유사하다.
데코레이터 예제로하면
interface Exchange {
    float rate(String source, String target);
    final class Fast implements Exchage {
        @Override
        public float rate(String source, String target) {
        final float rate;
        if (source.equals(target)) {
            rate = 1.0f;
        } else {
            rate = this.origin.rate(source, target);
        }
        return rate;
        }
        public float toUsd(String source) {
            return this.origin.rate(source, "USD");
        }
    }
}

중첩 클래스인 Exchange.Fast는 데코레이터인 동시에 '스마트'클래스다.
1. Exchange.Fast 는 rate() 메서드를 오버라이드 해서 더 강력하게 만든다.
이 클래스는 source와 target이 동일한 통화를 가리킬 경우 네트워크 호출을 피할 수 있도록 한다.
2. Exchange.Fast는 새로운 메서드인 toUsd()를 추가해서 USD로 쉽게 환율을 변환할 수 있도록 하였다.

